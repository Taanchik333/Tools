{
	"info": {
		"_postman_id": "cfb3cbd4-d1d1-401b-b33f-89acbfab0e45",
		"name": "Homework 2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "First",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200 \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный responce. \r",
							"pm.test (\"Body is correct\", function () {\r",
							"    pm.response.to.have.body (\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"//Проверить, что в body- string\r",
							"pm.test (\"Body is string\", function () {\r",
							"    typeof(pm.response) === \"string\" || true\r",
							"}) \r",
							"console.log (\"Body is string = \", + typeof(body))\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json;charset=utf-8",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/first",
					"host": [
						"{{url}}"
					],
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200 \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							" //Спарсить response body в json. \r",
							" var jsonBody = pm.response.json();\r",
							" console.log (\"RESPONSE\" , jsonBody);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.) \r",
							"pm.test(\"Name = Alex\", function (){\r",
							"    pm.expect(jsonBody.name).to.eql(\"Alex\");\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test (\"Age = 30\", function () {\r",
							"    pm.expect(jsonBody.age).to.eql(\"30\");    \r",
							"})\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test (\"Salry = 1500\", function () {\r",
							"      pm.expect (jsonBody.salary).to.eql(1500);\r",
							"})\r",
							" \r",
							"// Спарсить request.\r",
							" var reqBody = request.data;\r",
							" console.log(\"REQUEST\" , reqBody);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test (\"Response.Name = Request.Name = Alex\", function () {\r",
							"    pm.expect(jsonBody.name).to.eql(reqBody.name);\r",
							"    console.log (\"REQBODY.NAME = \" + typeof (reqBody.name));\r",
							"})\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test (\"Response.Age = Request.Age = 30\", function () {\r",
							"    pm.expect (jsonBody.age).to.eql(reqBody.age);\r",
							"})\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.\r",
							"pm.test (\"Response.Salary = Request.Salary = 1500\", function () {\r",
							"    console.log (\"REQBODY.SALARY = \" + typeof (reqBody.salary));\r",
							"    var salary_1 = +reqBody.salary;\r",
							"    console.log (\"REQBODY.SALARY_1 = \" + typeof (salary_1));\r",
							"    pm.expect (jsonBody.salary).to.eql(salary_1);\r",
							"})\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"var jsonBody = pm.response.json();\r",
							"console.log (\"PARAMETR FAMILY = \", jsonBody.family);\r",
							"\r",
							"// Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request) \r",
							"var jsonBody = pm.response.json();\r",
							"pm.test (\"Salary_1.5_year = salary*4\", function () {\r",
							"    pm.expect (jsonBody.family.u_salary_1_5_year).to.eql(reqBody.salary*4);\r",
							"    console.log (\"jsonBody.family.u_salary_1_5_year =\" , jsonBody.family.u_salary_1_5_year);\r",
							"    console.log (\"reqBody.family*4 = \", reqBody.salary*4);\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json;charset=utf-8",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Alex",
							"type": "text"
						},
						{
							"key": "age",
							"value": "30",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_3",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//2. Статус код 200 \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//3. Спарсить response body в json. \r",
							"var jsonBody = pm.response.json();\r",
							" console.log (\"RESPONSE\" , jsonBody);\r",
							"\r",
							"//4. Спарсить request. \r",
							"var reqBody = pm.request.url.query.toObject();\r",
							" console.log(\"REQUEST\" , reqBody);\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test (\"Request Name = Response Name\", function () {\r",
							"    pm.expect(jsonBody.name).to.eql(reqBody.name);\r",
							"})\r",
							"//6. Проверить, что age в ответе равно age s request (age забрать из request.) \r",
							"pm.test (\"Request AGE = Responce AGE\", function () {\r",
							"    console.log (\"REQUEST_AGE = \" + \"\" + typeof(reqBody.age) + \"=\" + reqBody.age);\r",
							"    console.log (\"RESPONCE_AGE = \" + \"\" + typeof(jsonBody.age) + \"=\" + jsonBody.age);\r",
							"    pm.expect(jsonBody.age).to.eql(reqBody.age);\r",
							"})\r",
							"\r",
							"//7. Проверить, что salary в ответе равно salary s request (salary забрать из request.) \r",
							"pm.test (\"Request Salary = Responce Salary\", function () {\r",
							"    console.log (\"REQUEST_SALARY = \" + \"\" + typeof(reqBody.salary) + \"=\" + reqBody.salary);\r",
							"    console.log (\"RESPONCE_SALARY = \" + \"\" + typeof(jsonBody.salary) + \"=\" + jsonBody.salary);\r",
							"    pm.expect(jsonBody.salary).to.eql(+reqBody.salary);\r",
							"})\r",
							"//8. Вывести в консоль параметр family из response. \r",
							"console.log(\"PARAMETR_FAMILY =\", jsonBody.family); \r",
							"\r",
							"//9. Проверить, что у параметра dog есть параметры name. \r",
							"pm.test (\"Parametr DOG have NAME\", function (){\r",
							"    pm.expect(jsonBody.family.pets.dog).to.have.property(\"name\");\r",
							"})\r",
							"//10. Проверить, что у параметра dog есть параметры age. \r",
							"pm.test (\"Parametr DOG have AGE\", function (){\r",
							"    pm.expect(jsonBody.family.pets.dog).to.have.property(\"age\");\r",
							"})\r",
							"//11. Проверить, что параметр name имеет значение Luky. \r",
							"pm.test (\"Parametr NAME have LUCKY\", function (){\r",
							"    pm.expect(jsonBody.family.pets.dog.name).to.eql(\"Luky\");\r",
							"    console.log (\"DOG NAME = \" + jsonBody.family.pets.dog.name);\r",
							"})\r",
							"//12. Проверить, что параметр age имеет значение 4. \r",
							"pm.test (\"Parametr AGE = 4\", function (){\r",
							"    pm.expect(jsonBody.family.pets.dog.age).to.eql(4);\r",
							"    console.log (\"DOG AGE = \" + jsonBody.family.pets.dog.age);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json;charset=utf-8",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/object_info_3?name=Peter&age=35&salary=1200",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Peter"
						},
						{
							"key": "age",
							"value": "35"
						},
						{
							"key": "salary",
							"value": "1200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							" //2. Статус код 200 \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//3. Спарсить response body в json. \r",
							"var jsonBody = pm.response.json();\r",
							"console.log (\"RESPONSE\" , jsonBody);\r",
							"\r",
							"//4. Спарсить request. \r",
							"var reqBody = pm.request.url.query.toObject()\r",
							"console.log (\"REQUEST\", reqBody )\r",
							"\r",
							"//5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"Name response = name request\", function () {\r",
							"    pm.expect(jsonBody.name).to.eql(reqBody.name);\r",
							"})\r",
							"\r",
							"//6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test(\"Age response = Age request\", function () {\r",
							"    var agee = parseInt (reqBody.age);\r",
							"    console.log (\"REQUEST_AGE = \" + \"\" + typeof(reqBody.age) + \"=\" + reqBody.age);\r",
							"    console.log (\"RESPONCE_AGE = \" + \"\" + typeof(jsonBody.age) + \"=\" + jsonBody.age);\r",
							"    pm.expect(jsonBody.age).to.eql(agee);\r",
							"   \r",
							"})\r",
							"//7. Вывести в консоль параметр salary из request.\r",
							"console.log(\"Salary from request = \" + \"\" + reqBody.salary)\r",
							"\r",
							"//8. Вывести в консоль параметр salary из response. \r",
							"console.log(\"Salary from response = \" + \"\" + jsonBody.salary)\r",
							"\r",
							"//. Вывести в консоль 0-й элемент параметра salary из response. \r",
							"console.log(\"Salary_0 from response = \" + \"\" + jsonBody.salary[0])\r",
							"\r",
							"//10. Вывести в консоль 1-й элемент параметра salary параметр salary из response. \r",
							"console.log(\"Salary_1 from response = \" + \"\" + jsonBody.salary[1])\r",
							"\r",
							"//11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"Salary_2 from response = \"+ \"\" + jsonBody.salary[2])\r",
							"\r",
							"//12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Response.Salary_0 = Requset.Salary\", function (){\r",
							"   console.log(\"Salary_0 from response = \" + \"\" + typeof(jsonBody.salary[0]) + \"=\" + jsonBody.salary[0]);\r",
							"   console.log(\"Salary from request = \" + \"\" + typeof(reqBody.salary) + \"=\" + reqBody.salary);\r",
							"   pm.expect (jsonBody.salary[0]).to.eql(+reqBody.salary)\r",
							"} ) \r",
							"//13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"pm.test(\"Response.Salary_1 = Requset.Salary*2\", function (){\r",
							"   console.log(\"Salary_1 from response = \" + \"\" + typeof(jsonBody.salary[1]) + \"=\" + jsonBody.salary[1]);\r",
							"   console.log(\"Salary from request = \" + \"\" + typeof(reqBody.salary) + \"=\" + reqBody.salary);\r",
							"   pm.expect (+jsonBody.salary[1]).to.eql(+reqBody.salary*2)\r",
							"} ) \r",
							"//14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"pm.test(\"Response.Salary_2 = Requset.Salary*3\", function (){\r",
							"   console.log(\"Salary_2 from response = \" + \"\" + typeof(jsonBody.salary[1]) + \"=\" + jsonBody.salary[2]);\r",
							"   console.log(\"Salary from request = \" + \"\" + typeof(reqBody.salary) + \"=\" + reqBody.salary);\r",
							"   pm.expect (+jsonBody.salary[2]).to.eql(+reqBody.salary*3)\r",
							"} ) \r",
							"//15. Создать в окружении переменную name \r",
							"//Enviroments - add variable name - Alex\r",
							"\r",
							"//16. Создать в окружении переменную age\r",
							"//Enviroments - add variable age - 30\r",
							"\r",
							"//17. Создать в окружении переменную salary \r",
							"//Enviroments - add variable salary - 1200\r",
							"\r",
							"//18. Передать в окружение переменную name \r",
							"var jsonBody = pm.response.json();\r",
							"pm.environment.set(\"name\", jsonBody.name);\r",
							"\r",
							"//19. Передать в окружение переменную age \r",
							"var jsonBody = pm.response.json();\r",
							"pm.environment.set(\"age\", jsonBody.age);\r",
							"\r",
							"//20. Передать в окружение переменную salary\r",
							"var jsonBody = pm.response.json();\r",
							"pm.environment.set(\"salary\", jsonBody.salary);\r",
							"\r",
							"//21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"var jsonBody = pm.response.json();\r",
							"jsonBody.salary.forEach(function(element) {\r",
							"    console.log(\"salary =\", element);\r",
							"});\r",
							"\r",
							"////////////////////////////////////\r",
							"var sal = jsonBody.salary;\r",
							"console.log(\"-For in - \");\r",
							"for (let i in sal){\r",
							"    console.log(i);\r",
							"    console.log(sal[i]);\r",
							"}\r",
							"/////////////////////////////\r",
							"console.log (\"-For of - \");\r",
							"for (let i of sal){\r",
							"    console.log(i);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json;charset=utf-8",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{url}}/object_info_4?name=Alex&age=30&salary=1200",
					"host": [
						"{{url}}"
					],
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "Alex"
						},
						{
							"key": "age",
							"value": "30"
						},
						{
							"key": "salary",
							"value": "1200"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// // //  1. Вставить параметр salary из окружения в request \r",
							"\r",
							"// //  Body-form-data - {{salary}}\r",
							"// // pm.environment.get(\"salary\");\r",
							"\r",
							"// // // 2. Вставить параметр age из окружения в age \r",
							"// // Body-form-data - {{age}}\r",
							"// //pm.environment.get(\"age\");\r",
							"\r",
							"// // // 3. Вставить параметр name из окружения в name \r",
							"// // Body-form-data - {{age}}\r",
							"// // pm.environment.get(\"name\");\r",
							"\r",
							"// 4. Отправить запрос. \r",
							"// // 5. Статус код 200 \r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// // 6. Спарсить response body в json. \r",
							"var jsonBody = pm.response.json();\r",
							"console.log (\"responce =\", jsonBody);\r",
							"\r",
							"// // 7. Спарсить request. \r",
							"var reqBody = request.data;\r",
							"console.log(\"REQUEST\" , reqBody);\r",
							"\r",
							"// // 8. Проверить, что json response имеет параметр start_qa_salary \r",
							"pm.test(\"Response has start_qa_salary\", function () {\r",
							"    pm.expect(jsonBody).to.have.property(\"start_qa_salary\");\r",
							"    })\r",
							"\r",
							"// // 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Response has qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonBody).to.have.property(\"qa_salary_after_6_months\");\r",
							"})\r",
							"// //  10. Проверить, что json response имеет параметр qa_salary_after_12_months \r",
							"pm.test(\"Response has qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonBody).to.have.property(\"qa_salary_after_12_months\");\r",
							"})\r",
							"// // 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year \r",
							"pm.test(\"Response has qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonBody).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"})\r",
							"\r",
							"// // 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years \r",
							"pm.test(\"Response has qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonBody).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"})\r",
							"\r",
							"// // 13. Проверить, что json response имеет параметр person \r",
							"pm.test(\"Response has person\", function () {\r",
							"    pm.expect(jsonBody).to.have.property(\"person\");\r",
							"})\r",
							"\r",
							"// // 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.) \r",
							"pm.test(\"Start_qa_salary.response = salary.request\", function () {\r",
							"    console.log(\"Responce_Salary = \" + typeof(jsonBody.start_qa_salary) + \"=\" + jsonBody.start_qa_salary);\r",
							"    console.log(\"Request_Salary = \" + typeof(reqBody.salary) + \"=\" + reqBody.salary);\r",
							"    var salary_3 = +reqBody.salary;\r",
							"    pm.expect(jsonBody.start_qa_salary).to.eql(salary_3);\r",
							"})\r",
							"\r",
							"// // 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"pm.test (\"Responce_QA_salary_after_6_months = Request_salary*2\", function () {\r",
							"    console.log(\"Request_salary*2 = \" + typeof(reqBody.salary) + \"=\" + reqBody.salary*2);\r",
							"    console.log(\"qa_salary_after_6_months =\" + typeof(jsonBody.qa_salary_after_6_months)) \r",
							"pm.expect(jsonBody.qa_salary_after_6_months).to.eql(+reqBody.salary*2)\r",
							"})\r",
							"\r",
							"// //  16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.) \r",
							"pm.test (\"Responce_QA_salary_after_12_months = Request_salary*2.7\", function () {\r",
							"    console.log(\"Request_salary*2.7 = \" + typeof(reqBody.salary) + \"=\" + reqBody.salary*2.7);\r",
							"    console.log(\"qa_salary_after_12_months =\" + typeof(jsonBody.qa_salary_after_6_months)) \r",
							"pm.expect(jsonBody.qa_salary_after_12_months).to.eql(+reqBody.salary*2.7)\r",
							"})\r",
							"// // 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"pm.test (\"Responce_QA_salary_after_1.5_year = Request_salary*3.3\", function () {\r",
							"    console.log(\"Request_salary*3.3 = \" + typeof(reqBody.salary) + \"=\" + reqBody.salary*3.3);\r",
							"    console.log(\"qa_salary_after_1.5_year =\" + typeof(jsonBody[\"qa_salary_after_1.5_year\"])) \r",
							"pm.expect(jsonBody[\"qa_salary_after_1.5_year\"]).to.eql(+reqBody.salary*3.3)\r",
							"})\r",
							"// //  18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"pm.test (\"Responce_QA_salary_after_3.5_years = Request_salary*3.8\", function () {\r",
							"    console.log(\"Request_salary*3.8 = \" + typeof(reqBody.salary) + \"=\" + reqBody.salary*3.8);\r",
							"    console.log(\"qa_salary_after_3.5_years =\" + typeof(jsonBody[\"qa_salary_after_3.5_years\"])) \r",
							"pm.expect(jsonBody[\"qa_salary_after_3.5_years\"]).to.eql(+reqBody.salary*3.8)\r",
							"})\r",
							"// //  19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test (\"Responce_person_u_name_1 = Request_salary\", function () {\r",
							"    console.log(\"Request_person_u_name = \" + typeof(reqBody.salary) + \"=\" + reqBody.salary);\r",
							"    console.log(\"Response_person_U_name[1] =\" + typeof(jsonBody.person.u_name[1]) + jsonBody.person.u_name[1]);\r",
							"pm.expect(jsonBody.person.u_name[1]).to.eql(+(reqBody.salary))\r",
							"})\r",
							"// //  20. Проверить, что что параметр u_age равен age из request (age забрать из request.) \r",
							"pm.test (\"Responce_person_u_age = Request_age\", function () {\r",
							"    console.log(\"Request_person_u_age = \" + typeof(reqBody.age) + \"=\" + reqBody.age);\r",
							"    console.log(\"Response_person_U_age =\" + typeof(jsonBody.person.u_age) + jsonBody.person.u_age);\r",
							"pm.expect(jsonBody.person.u_age).to.eql(+(reqBody.age))\r",
							"})\r",
							"// // 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"pm.test (\"Responce_U_salary_5_years = Request_salary*4.2\", function () {\r",
							"    console.log(\"Request_salary*4.2 = \" + typeof(reqBody.salary) + \"=\" + reqBody.salary*4.2);\r",
							"    console.log(\"U_salary_5_years =\" + typeof(jsonBody.person.u_salary_5_years));\r",
							"pm.expect(jsonBody.person.u_salary_5_years).to.eql(+(reqBody.salary*4.2))\r",
							"})\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"// var jsonBody = pm.responce.json();\r",
							"var per = jsonBody.person;\r",
							"console.log(\"-For in - \");\r",
							"for (let i in per){\r",
							"    console.log(i);\r",
							"    console.log(per[i]);\r",
							"}\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json;charset=utf-8",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{url}}/user_info_2",
					"host": [
						"{{url}}"
					],
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}